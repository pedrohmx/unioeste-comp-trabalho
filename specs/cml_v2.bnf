# CML lang BNF

<program>::= <stmts>
<stmts>::=
    | <stmts> <stmt>
    | ε
<stmt>::=
    | <decl_stmt>
    | <attrib_stmt>
    | <command>
<decl>::= #TODO: remove prefix
    | <type> <id>;
    | <type> <id> = <expr>;
<attrib_stmt>::= # TODO: remove prefix
    | <var> = <expr>;
    | <var> <attrib_op> <expr>;
<expr>::=
    | <arith_expr>
    | <expr_bool>
<arith_expr>::= # TODO: remove prefix
    | <arith_expr> + <arith_term>
    | <arith_expr> - <arith_term>
    | <arith_term>
<arith_term>::=
    | <arith_term> * <arith_term>
    | <arith_term> / <arith_term>
    | <arith_term> % <arith_term>
    | ( <arith_expr> )
    | <var>
    | <literal>
<expr_bool>::= #TODO: remove prefix
    | ! <expr_bool>
    | <var> <rel_op> <var>
    | (<expr_bool>) <op_bool> (<expr_bool>)
    | <boolean> <op_bool> <boolean>
    | <boolean>
<boolean>::=
    | <literal_bool>
    | <var>
<command>::=
    | read <var> ;
    | write <writables> ;
    | <if_stmt>
    | <while_stmt>
    | <for_stmt>
<writables>::= #TODO: remove prefix
    | <writable> 
    | <writable> , <writables>
<writable>::= 
    | <literal>
    | <var>
    | <expr>
<literal>::=
    | <literal_int> 
    | <literal_float> 
    | <literal_bool> 
    | <literal_str>
<literal_bool>::=
    | true
    | false
<var>::= <id>
<if>::=
    | if ( <expr_bool> ) { <stmts> } <else_stmt>
<else_stmt>::= 
    | else { <stmts> } 
    | ε
<while_stmt>::= while ( <expr_bool> ) { <stmts> }
<for_stmt>::= for ( <decl> ; <expr_bool> ; <attrib>) { <stmts> }