# CML lang BNF

## Built-ins
#
#- id
#- op_sum, op_mul, bool_op
#-

<program>::= <stmts>
<stmts>::=
    | <stmts> <stmt>
    | ε
<stmt>::=
    | <decl_stmt>
    | <attrib_stmt>
    | <command>
<decl>::=
    | <type> <id> <decl_end> ;
<decl_end>::=
    | = <expr>
    | ε
<attrib_stmt>::=
    | <var> <attrib_end> ;
<attrib_end>::=
    | = <expr>
    | <attrib_op> <expr>
<expr>::=
    | <arith_expr>
    | <bool_expr>
<arith_expr>::= # TODO: remove prefix
    | <arith_expr> <op_sum> <arith_term>
    | <arith_term>
<arith_term>::=
    | <arith_term> <op_mul> <arith_term>
    | ( <arith_expr> )
    | <var>
    | <literal>
<bool_expr>::=
    | not <bool_expr>
    | <boolean> <bool_expr_chain>
<bool_expr_chain>::=
    | <bool_op> <boolean>
    | ε
<boolean>::=
    | <literal_bool>
    | <var>
<command>::=
    | read <var> ;
    | write <writables> ;
    | <if_stmt>
    | <while_stmt>
    | <for_stmt>
<writables>::=
    | <writable> <writable_chain>
<writable_chain>::=
    | , <writable> <writable_chain>
    | ε
<writable>::= 
    | <literal>
    | <var>
    | <expr>
<literal>::=
    | <literal_int> 
    | <literal_float> 
    | <literal_bool> 
    | <literal_str>
<literal_bool>::=
    | true
    | false
<var>::= <id>
<if_stmt>::=
    | if ( <bool_expr> ) { <stmts> } <else_stmt>
<else_stmt>::= 
    | else { <stmts> } 
    | ε
<while_stmt>::= while ( <bool_expr> ) { <stmts> }
<for_stmt>::= for ( <decl> ; <bool_expr> ; <attrib>) { <stmts> }
