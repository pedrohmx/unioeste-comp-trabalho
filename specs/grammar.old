PROG -> STMTS

STMTS -> STMTS STMT
STMTS -> ''

STMT -> DECL_STMT
STMT -> ATTRIB_STMT
STMT -> COMMAND

DECL_STMT -> type id DECL_END ;
DECL_END -> attrib EXPR
DECL_END -> ''


<attrib_stmt> -> <var> <attrib_end> ";"
<attrib_end> -> <attrib> <expr> | <attrib_op> <expr>
<expr> -> <arith_expr> | <bool_expr> | <rel_expr>
<rel_expr> -> <arith_expr> <rel_op> <arith_expr>
<arith_expr> -> <arith_expr> <arith_op_sum> <arith_term> | <arith_term>
<arith_term> -> <arith_term> <arith_op_mul> <arith_term> | "(" <arith_expr> ")" | <var> | <literal>
<bool_expr> -> not <bool_expr> | <boolean> <bool_expr_chain>
<bool_expr_chain> -> <bool_op> <boolean> | "NULL"
<boolean> -> <literal_bool> | <var>
<command> -> read <var> ";" | write <writables> ";" | <if_stmt> | <while_stmt> | <for_stmt>
<writables> -> <writable> <writable_chain>
<writable_chain> -> "," <writable> <writable_chain> | NULL
<writable> -> <literal> | <var> | <expr>
<literal> -> "literal_int" | "literal_float" | "literal_bool" | "literal_str"
<var> -> <id>
<if_stmt> -> if "(" <bool_expr> ")" "{" <stmts> "}" <else_stmt>
<else_stmt> -> else "{" <stmts> "}" | NULL
<while_stmt> -> while "(" <bool_expr> ")" "{" <stmts> "}"
<for_stmt> -> for "(" <decl> ";" <bool_expr> ";" <attrib>")" "{" <stmts> "}"

<type> -> type
<id> -> id
<arith_op_sum> -> arith_op_sum
<arith_op_mul> -> arith_op_mul
<bool_op> -> bool_op
<rel_op> -> rel_op


{'bool_op', 'id', 'type', 'literal_float', ';', 'unknown', 'attrib', '(', '{', 'write', ',', 'op_mul', 'attrib_op', 'read', 'comment', 'while', 'literal_string', 'not', 'literal_int', 'rel_op', 'literal_bool', '}', 'op_sum', 'for', ')', 'if', 'else'}